# from flask import Flask
# import pandas as pd
# from import_export import get_products_dataframe

# df = pd.DataFrame()
# df = get_products_dataframe()


import numpy as np
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
from import_export import get_products_dataframe
from flask import Flask, jsonify

# Database Setup
engine = create_engine("sqlite:///grocery.sqlite")

# reflect an existing database into a new model
Base = automap_base()

# reflect the tables
Base.prepare(autoload_with=engine)

# Save reference to the table
products = Base.classes.products

# Flask Setup
app = Flask(__name__)

# Flask Routes
@app.route("/")
def welcome():
    """List all available api routes."""
    return (
        f"Select which cookie info you'd like to see!<br/>"
        f"/allstores<br/>"
        f"/your_cookie<br/>"
        #f"/Overall cookie info<br/>"
        #f"/All product info"
    )

@app.route("/allstores")
def allstoresmin():

    session = Session(engine)

    results = session.query(products.store, products.ingredient, func.min(products.price).label('min_price')) \
        .group_by(products.store, products.ingredient) \
        .all()

    session.close()

    
    # Create a dictionary to store the results grouped by store
    store_min_prices = {}
    for store, ingredient, min_price in results:
        if store not in store_min_prices:
            store_min_prices[store] = []
        store_min_prices[store].append({'ingredient': ingredient, 'min_price': min_price})
    
    # Convert the dictionary into a list of dictionaries
    min_prices_list = [{'store': store, 'ingredients': values} for store, values in store_min_prices.items()]
    
    return jsonify(min_prices_list)

    # min_prices = []
    # for store, ingredient, min_price in results:
    #     min_prices.append({'store': store, 'ingredient': ingredient, 'min_price': min_price})
    
    # return jsonify(min_prices)


#results = session.query(products.store, products.ingredient, func.min(products.price)).all().group_by(products.ingredient).all()
    # Create a dictionary from the row data and append to a list of all_passengers
    # all_Stores = []
    # for price, store, ingredient in results:
    #     groceries = {}
    #     groceries["price"] = price
    #     groceries["store"] = store
    #     groceries["ingredient"] = ingredient
    #     all_Stores.append(groceries)

    # return jsonify(all_Stores)

@app.route("/your_cookie")
def yourcookie():
    session = Session(engine)

    results = session.query(products.store, products.ingredient, func.min(products.price).label('min_price')) \
        .group_by(products.store, products.ingredient) \
        .all()

    session.close()

    # Create a dictionary to store the results grouped by store
    store_min_prices = {}
    for store, ingredient, min_price in results:
        if store not in store_min_prices:
            store_min_prices[store] = {}
        if ingredient not in store_min_prices[store]:
            store_min_prices[store][ingredient] = min_price
        else:
            store_min_prices[store][ingredient] += min_price
    
    # Convert the dictionary into a list of dictionaries
    min_prices_list = []
    for store, ingredients in store_min_prices.items():
        total_min_price = sum(ingredients.values())
        min_prices_list.append({'store': store, 'total_min_price': total_min_price})
    
    return jsonify(min_prices_list)


if __name__ == '__main__':
     app.run(debug=True)








